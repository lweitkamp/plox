from io import TextIOWrapper
from pathlib import Path


def main(output_dir: Path):
    types = [
        "Binary   - left: Expression, operator: Token, right: Expression",
        "Grouping - expression: Expression",
        "Literal  - value: object",
        "Unary    - operator: Token, right: Expression",
    ]

    imports = [
        "from dataclasses import dataclass",
        "from .token_type import Token",
    ]

    define_ast(output_dir, "Expression", types, imports)


def define_ast(dir: Path, base_name: str, types: list[str], imports: list[str]):
    with dir.open(mode="w") as f:
        f.write("# This file is generated by generate_ast.py\n")
        for import_ in imports:
            f.write(f"{import_}\n")
        f.write("\n\n")

        f.write(f"@dataclass\nclass {base_name}:\n    pass\n")
        f.write("\n\n")

        for type_ in types:
            class_name, fields = map(str.strip, type_.split("-"))
            define_type(f, base_name, class_name, fields)


def define_visitor(f: TextIOWrapper, base_name: str, types: list[str]):
    f.write("    def accept(self, visitor: Visitor):\n")
    f.write(f"        return visitor.visit_{base_name.lower()}(self)\n\n")

    for type_ in types:
        class_name, _ = map(str.strip, type_.split("-"))
        f.write(f"    def visit_{class_name.lower()}(self, visitor: Visitor):\n")
        f.write("        raise NotImplementedError()\n\n")


def define_type(f: TextIOWrapper, base_name: str, class_name: str, fields: str):
    f.write(f"@dataclass\nclass {class_name}({base_name}):\n")
    for field in fields.split(", "):
        name, type_ = field.split(": ")
        f.write(f"    {name}: {type_}\n")
    f.write("\n\n")


if __name__ == "__main__":
    import argparse

    arguments = argparse.ArgumentParser()
    arguments.add_argument(
        "--output-dir",
        type=Path,
        default="src/plox/expressions.py",
        help="Directory to output the generated AST classes.",
    )
    args = arguments.parse_args()
    main(args.output_dir)
